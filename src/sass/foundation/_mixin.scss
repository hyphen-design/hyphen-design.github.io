@mixin col-width($i, $grid-columns, $gutter){
  width: col-width($i, $grid-columns, $gutter);
}

//カラム数($grid-columns)に応じてスタイルを生成。引数$gutterはgutterのサイズ
@mixin col-loop($gutter: 0){
  @for $i from 1 through $grid-columns {

    @if $grid-columns / $i == 3 {
      &-third, &-#{$i}{
        @include col-width($i, $grid-columns, $gutter);
      }

    } @else if $grid-columns / $i == 2 {
      &-half, &-#{$i}{
        @include col-width($i, $grid-columns, $gutter);
      }

    } @else if $grid-columns == $i {
      &-full, &-#{$i}{
        @include col-width($i, $grid-columns, $gutter);
      }

    } @else {
      &-#{$i}{
        @include col-width($i, $grid-columns, $gutter);
      }
    }
  }
}

@mixin order-loop(){
  @for $i from 1 through $grid-columns {
    &-#{$i}{
      order: $i;
    }
  }
}

//gutter設定用のベース
@mixin gutter($margin){
  margin-top: $margin;
  margin-left: $margin;
}

//gutter不要の場合相殺する
@mixin nogutter(){
  @include gutter(0);
}

//row用のgutterを設定
@mixin row-gutter(){
  @include gutter(-$grid-gutter);
}

//col用のgutterを設定
@mixin col-gutter(){
  @include gutter($grid-gutter);
}

//colのクラス名からスタイルを生成する。
@mixin col-style-base($size){
  $classname: selector('.l-col', $size);
  #{$classname}{
    // flex: 1;
    @include col-loop($grid-gutter);

    .row-nogutter > &{
      @include col-loop();
    }
  }
}

//colのクラス名とスクリーンサイズを指定してスタイルを生成する
@mixin col-style($size){
  @if screen-size($size) != 0 {
    @media screen and (min-width: screen-size($size)){
      @include col-style-base($size);
    }
  }@else{
    @include col-style-base($size);
  }
}

//orderのクラス名からスタイルを生成する。
@mixin order-style-base($size){
  $classname: selector('.l-order', $size);
  #{$classname}{

    &-first{
      order: -1;
    }

    @include order-loop();

    &-last{
      order: $grid-columns + 1;
    }
  }
}

//orderのクラス名とスクリーンサイズを指定してスタイルを生成する
@mixin order-style($size){
  @if screen-size($size) != 0 {
    @media screen and (min-width: screen-size($size)){
      @include order-style-base($size);
    }
  }@else{
    @include order-style-base($size);
  }
}

// カラムサイズと間隔からcolの横幅を算出する
@function col-width($i, $grid, $gutter: 0){
  $contentWidth: 100% * ($i / $grid);

  @if $gutter == 0 {
    @return $contentWidth;
  } @else {
    @if unit($gutter) == '%' {
      @return $contentWidth - $gutter;
    } @else {
      @return calc(#{$contentWidth} - #{$gutter});
    }
  }
}

// 基準ブレイクポイントに設定したサイズのクラス名にエイリアス（.col）を追加する
@function classname-alias($base-classname, $size){
  @if $main-breakpoint == $size {
    @if $alias {
      @if $alias == substitute {
        @return $base-classname;
      } @else {
        @return $base-classname + ', ' + tie($base-classname, $size);
      }
    }
  }@else{
    @return tie($base-classname, $size);
  }
}

@function selector($base-classname, $size){
  @if $alias {
    @return classname-alias($base-classname, $size);
  }@else{
    @return tie($base-classname, $size);
  }
}

// メディアクエリ用mixin
@mixin mq-sm {
  @media screen and (min-width: $breakpoint-size-sm){
    @content;
  }
}

@mixin mq-md {
  @media screen and (min-width: $breakpoint-size-md){
    @content;
  }
}

@mixin mq-lg {
  @media screen and (min-width: $breakpoint-size-lg){
    @content;
  }
}

@mixin mq-xl {
  @media screen and (min-width: $breakpoint-size-xl){
    @content;
  }
}

@mixin mq-mobile { // for Mobile and Tablet
  @media screen and (max-width: $breakpoint-size-lg - 1px){
    @content;
  }
}

@mixin mq-mddown { // for Smartphone only
  @media screen and (max-width: $breakpoint-size-md - 1px){
    @content;
  }
}

@mixin mq-smartphone { // for Smartphone only
  @media screen and (max-width: $breakpoint-size-sm - 1px){
    @content;
  }
}
